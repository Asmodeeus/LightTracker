package as.swarmapp.lighttracker;

import android.app.IntentService;
import android.app.Notification;
import android.app.PendingIntent;
import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.support.v4.app.NotificationCompat;
import android.util.Log;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import as.swarmapp.lighttracker.BaseDeDonnees.DAOPosition;
import as.swarmapp.lighttracker.BaseDeDonnees.Position;


/**
 * An {@link IntentService} subclass for handling asynchronous task requests in
 * a service on a separate handler thread.
 * <p/>
 * TODO: Customize class - update intent actions and extra parameters.
 */
public class LocalisationPOST extends IntentService implements
        GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, LocationListener {
    // TODO: Rename actions, choose action names that describe tasks that this
    // IntentService can perform, e.g. ACTION_FETCH_NEW_ITEMS

    private boolean tracking = true;

    // Pour la localisation
    private GoogleApiClient monClient;
    private LocationRequest monLR = new LocationRequest();

    // Pour le HTTP
    public static SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss", Locale.FRANCE); // timestamp selon le format de Haggis. Locale.FRANCE sert à écrire les chiffres en ASCII
    public static final String FORMAT_PARAM_ = "%s=%s&";
    public static final String LISTE_ = "liste[%s]";

    // Pour la BDD
    private DAOPosition monDAO = null;

    // Autre
    private String adresse = "";
    private String token = "";
    private long tracker_id = -1;

    public LocalisationPOST() {
        super("LocalisationPOST");
    }

    @Override
    public void onCreate(){
        super.onCreate();
        Log.w("onCreate", "coucou");
        //*
        // L'icône sera une petite loupe
        int icon = R.drawable.ic_action_search;
        PendingIntent contentIntent = PendingIntent.getActivity(LocalisationPOST.this, 0, new Intent(this, LocalisationPOST.class), 0);

        Notification notification = new NotificationCompat.Builder(this)
                .setWhen(System.currentTimeMillis())
                .addAction(icon, "title", contentIntent)
                .build();
        Log.w("onHandleIntent", "startForeground");
        startForeground(1, notification);

        //*/
    }

    @Override
    protected void onHandleIntent(Intent intent) {


        Log.w("onHandleIntent", "coucou");

        if (intent != null) {
            adresse     = intent.getStringExtra(Const.EXTRA_ADRESSE);
            token       = intent.getStringExtra(Const.EXTRA_TOKEN);
            tracker_id  = intent.getLongExtra(Const.EXTRA_TRACKER, -1);

            if (adresse.length()!=0 && token.length()!=0 && tracker_id!=-1) {
                //handleStart();

            }else {
                throw new ExceptionInInitializerError("Les paramètres sont incorrects");
            }

        }
    }

    /**
     * Handle action Foo in the provided background thread with the provided
     * parameters.
     */
    private void handleStart() {
        tracking = true;
        // TODO: Handle action start
        buildGoogleApiClient();

    }

    /**
     * Handle action Baz in the provided background thread with the provided
     * parameters.
     */
    private void handleStop() {
        tracking = false;
        stopLocationUpdates();

        // TODO: Handle action Baz
        throw new UnsupportedOperationException("Not yet implemented");
    }


    /* -------------------- LOCALISATION ---------------*/


    protected synchronized void buildGoogleApiClient() {
        monClient = new GoogleApiClient.Builder(this)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(LocationServices.API)
                .build();
        monClient.connect();
    }

    @Override
    public void onConnected(Bundle bundle) {
        parametrerLocationRequest();
        startLocationUpdates();
    }

    protected void parametrerLocationRequest() {
        monLR.setInterval(5000);
        monLR.setFastestInterval(3000);
        monLR.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
    }

    private void startLocationUpdates() {
        LocationServices.FusedLocationApi.requestLocationUpdates(monClient, monLR, this);
    }

    @Override
    public void onConnectionSuspended(int i) {
        // TODO report connection suspended
        Log.w("onConnectionSuspended", " ");
    }

    @Override
    public void onLocationChanged(Location location) {
        if (location != null) {
            Log.w("onLocationChanged", location.getLatitude() + ", "+ location.getLongitude());
            //MAJaffichage(new Position(adresse, tracker_id, token, sdf.format(new Date()), (float) location.getLatitude(), (float) location.getLongitude()));
        }
    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {
        // TODO report connection failed
        Log.w("onConnectionFailed", " ");
    }

    protected void stopLocationUpdates() {
        LocationServices.FusedLocationApi.removeLocationUpdates(monClient, this);
    }


    /* -------------- METHODES HTTP ------------- */
    public String PositionToURL(Position p){
        Map<String, String> paramsKV = new HashMap<>(5);
        paramsKV.put(String.format(LISTE_, DAOPosition.TOKEN), p.getToken());
        paramsKV.put(String.format(LISTE_, DAOPosition.TRACKER_ID), Long.toString(p.getTracker_id()));
        paramsKV.put(String.format(LISTE_, DAOPosition.HORODATE), p.getDatetime());
        paramsKV.put(String.format(LISTE_, DAOPosition.LATITUDE), String.valueOf(p.getLatitude()));
        paramsKV.put(String.format(LISTE_, DAOPosition.LONGITUDE), String.valueOf(p.getLongitude()));

        return mapToParams(paramsKV);
    }

    public static String mapToParams(Map<String, String> laMap){
        String s = "";

        for (String k:laMap.keySet()) {
            s += String.format(FORMAT_PARAM_,k, laMap.get(k));
        }
        if (s.length()-1 >= 0) {
            return s.substring(0, s.length() - 1);
        }
        else
            return "";
    }
}
